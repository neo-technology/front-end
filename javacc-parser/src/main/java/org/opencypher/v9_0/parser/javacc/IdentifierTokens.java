/*
 * Copyright (c) Neo4j Sweden AB (http://neo4j.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.opencypher.v9_0.parser.javacc;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import static org.opencypher.v9_0.parser.javacc.CypherConstants.*;

public class IdentifierTokens {
    private static final Set<Integer> identifiers = new HashSet<>(Arrays.asList(
            ESCAPED_SYMBOLIC_NAME,
            // keywords
            ACCESS,
            ACTIVE,
            ADMIN,
            ADMINISTRATOR,
            ALIAS,
            ALIASES,
            ALL_SHORTEST_PATH,
            ALL,
            ALTER,
            AND,
            ANY,
            AS,
            ASC,
            ASSERT,
            ASSIGN,
            AT,
            BOOSTED,
            BRIEF,
            BTREE,
            BUILT,
            BY,
            CALL,
            CASE,
            CHANGE,
            COMMAND,
            COMMANDS,
            COMMIT,
            COMPOSITE,
            CONSTRAINT,
            CONSTRAINTS,
            CONTAINS,
            COPY,
            COUNT,
            CREATE,
            CSV,
            CURRENT,
            DATA,
            DATABASE,
            DATABASES,
            DBMS,
            DEALLOCATE,
            DEFAULT_TOKEN,
            DEFINED,
            DELETE,
            DENY,
            DESC,
            DESTROY,
            DETACH,
            DISTINCT,
            DRIVER,
            DROP,
            DUMP,
            EACH,
            ELEMENT,
            ELEMENTS,
            ELSE,
            ENABLE,
            ENCRYPTED,
            END,
            ENDS,
            EXECUTABLE,
            EXECUTE,
            EXIST,
            EXISTENCE,
            EXISTS,
            FALSE,
            FIELDTERMINATOR,
            FOR,
            FOREACH,
            FROM,
            FULLTEXT,
            FUNCTION,
            FUNCTIONS,
            GRANT,
            GRAPH,
            GRAPHS,
            HEADERS,
            HOME,
            IDENTIFIER,
            IF,
            IMPERSONATE,
            IMMUTABLE,
            IN,
            INDEX,
            INDEXES,
            INF,
            INFINITY,
            IS,
            JOIN,
            KEY,
            LABEL,
            LABELS,
            LIMITROWS,
            LOAD,
            LOOKUP,
            MANAGEMENT,
            MATCH,
            MERGE,
            NAME,
            NAMES,
            NAN,
            NEW,
            NODE,
            NODES,
            NONE,
            NOT,
            NOWAIT,
            NULL,
            OF,
            ON,
            ONLY,
            OPTIONS,
            OPTIONAL,
            OR,
            ORDER,
            OUTPUT,
            PASSWORD,
            PASSWORDS,
            PERIODIC,
            PLAINTEXT,
            POINT,
            POPULATED,
            PRIVILEGE,
            PRIVILEGES,
            PROCEDURE,
            PROCEDURES,
            PROPERTIES,
            PROPERTY,
            RANGE,
            READ,
            RECURSIVELY,
            REDUCE,
            REL,
            RELATIONSHIP,
            RELATIONSHIPS,
            REMOVE,
            RENAME,
            REPLACE,
            REQUIRE,
            REQUIRED,
            RETURN,
            REVOKE,
            ROLE,
            ROLES,
            ROW,
            ROWS,
            SCAN,
            SEC,
            SECOND,
            SECONDS,
            SEEK,
            SERVER,
            SERVERS,
            SET,
            SHORTEST_PATH,
            SHOW,
            SINGLE,
            SKIPROWS,
            START,
            STARTS,
            STATUS,
            STOP,
            SUSPENDED,
            TARGET,
            TERMINATE,
            TEXT,
            THEN,
            TO,
            TRANSACTION,
            TRANSACTIONS,
            TRAVERSE,
            TRUE,
            TYPE,
            TYPES,
            UNION,
            UNIQUE,
            UNWIND,
            USE,
            USER,
            USERS,
            USING,
            VERBOSE,
            WAIT,
            WHEN,
            WHERE,
            WITH,
            WRITE,
            XOR,
            YIELD));

    public static Set<Integer> getIdentifierTokens() {
        return identifiers;
    }
}
